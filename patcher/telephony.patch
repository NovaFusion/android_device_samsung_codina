From 9487e7ba81b9fcbcdf08cb9e5c6b92f74a84294c Mon Sep 17 00:00:00 2001
From: maclaw <maclaw@maclaw.pl>
Date: Thu, 14 Nov 2013 19:32:47 +0100
Subject: [PATCH] volume fix przy odbieraniu

---
 AndroidManifest.xml                      |  6 +++
 src/com/android/phone/PhoneReceiver.java | 32 +++++++++++++++
 src/com/android/phone/StateListener.java | 67 ++++++++++++++++++++++++++++++++
 3 files changed, 105 insertions(+)
 create mode 100644 src/com/android/phone/PhoneReceiver.java
 create mode 100644 src/com/android/phone/StateListener.java

diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index 5615b85..429a655 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -535,6 +535,12 @@
                 <action android:name="com.android.phone.ACTION_SEND_SMS_FROM_NOTIFICATION" />
             </intent-filter>
         </receiver>
+        
+        <receiver android:name=".PhoneReceiver">
+            <intent-filter>
+                <action android:name="android.intent.action.PHONE_STATE"/>
+            </intent-filter>
+        </receiver>
 
         <!-- service to dump telephony information -->
         <service android:name="HfaService" android:exported="false"/>
diff --git a/src/com/android/phone/PhoneReceiver.java b/src/com/android/phone/PhoneReceiver.java
new file mode 100644
index 0000000..fb6878b
--- /dev/null
+++ b/src/com/android/phone/PhoneReceiver.java
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2013 MaclawStudio
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.phone;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.telephony.PhoneStateListener;
+import android.telephony.TelephonyManager;
+
+public class PhoneReceiver extends BroadcastReceiver {
+    @Override
+    public void onReceive(Context context,Intent intent) {
+        TelephonyManager telephonyManager=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);
+        telephonyManager.listen(new StateListener(context),PhoneStateListener.LISTEN_CALL_STATE);
+    }
+}
+
diff --git a/src/com/android/phone/StateListener.java b/src/com/android/phone/StateListener.java
new file mode 100644
index 0000000..52409de
--- /dev/null
+++ b/src/com/android/phone/StateListener.java
@@ -0,0 +1,67 @@
+/*
+ * Copyright (C) 2013 MaclawStudio
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.phone;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.content.SharedPreferences.Editor;
+import android.media.AudioManager;
+import android.telephony.PhoneStateListener;
+import android.telephony.TelephonyManager;
+
+public class StateListener extends PhoneStateListener {
+    private Context mContext;
+    public StateListener(Context context) {
+        super();
+        mContext=context;
+    }
+    
+    @Override
+    public void onCallStateChanged(int state,String incomingNumber) {
+        super.onCallStateChanged(state,incomingNumber);
+        if(state==TelephonyManager.CALL_STATE_OFFHOOK) {
+            new Thread(new Runnable() {
+                public void run() {
+                    //odczytywanie
+                    SharedPreferences preferences = (SharedPreferences)mContext.getSharedPreferences("ms_volume", Context.MODE_PRIVATE);
+                    int wartosc=preferences.getInt("ms_value",5);
+                    //ustawianie
+                    AudioManager amanager=(AudioManager)mContext.getSystemService(Context.AUDIO_SERVICE);
+                    amanager.setStreamVolume(AudioManager.STREAM_VOICE_CALL,wartosc-1,0);
+                    try {
+                        Thread.sleep(200);
+                    }
+                    catch(Exception e) {}
+                    amanager.setStreamVolume(AudioManager.STREAM_VOICE_CALL,wartosc,0);
+                }
+            }).start();
+        }
+        if(state==TelephonyManager.CALL_STATE_IDLE) {
+            new Thread(new Runnable() {
+                public void run() {
+                    AudioManager amanager=(AudioManager)mContext.getSystemService(Context.AUDIO_SERVICE);
+                    int anal=amanager.getStreamVolume(AudioManager.STREAM_VOICE_CALL);
+                    SharedPreferences preferences = (SharedPreferences)mContext.getSharedPreferences("ms_volume", Context.MODE_PRIVATE);
+                    SharedPreferences.Editor preferencesEditor = preferences.edit();
+                    preferencesEditor.putInt("ms_value",anal);
+                    preferencesEditor.commit();
+                }
+            }).start();
+        }
+    }
+}
+
-- 
1.8.4.2


