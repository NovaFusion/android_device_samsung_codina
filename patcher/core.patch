From 63a4a158761f14f6f6853deef2e22637fd233c67 Mon Sep 17 00:00:00 2001
From: Marcin Chojnacki <marcinch7@gmail.com>
Date: Sun, 23 Mar 2014 13:19:54 +0100
Subject: [PATCH] ste: virtual flattenable

---
 include/utils/Flattenable.h | 31 +++++++------------------------
 libutils/Android.mk         |  1 +
 libutils/Flattenable.cpp    | 24 ++++++++++++++++++++++++
 3 files changed, 32 insertions(+), 24 deletions(-)
 create mode 100644 libutils/Flattenable.cpp

diff --git a/include/utils/Flattenable.h b/include/utils/Flattenable.h
index 882a8b2..6d0fdaf 100644
--- a/include/utils/Flattenable.h
+++ b/include/utils/Flattenable.h
@@ -79,21 +79,20 @@ class FlattenableUtils {
  * Flattenable objects must implement this protocol.
  */
 
-template <typename T>
 class Flattenable {
 public:
     // size in bytes of the flattened object
-    inline size_t getFlattenedSize() const;
+    virtual size_t getFlattenedSize() const = 0;
 
     // number of file descriptors to flatten
-    inline size_t getFdCount() const;
+    virtual size_t getFdCount() const = 0;
 
     // flattens the object into buffer.
     // size should be at least of getFlattenedSize()
     // file descriptors are written in the fds[] array but ownership is
     // not transfered (ie: they must be dupped by the caller of
     // flatten() if needed).
-    inline status_t flatten(void*& buffer, size_t& size, int*& fds, size_t& count) const;
+    virtual status_t flatten(void*& buffer, size_t& size, int*& fds, size_t& count) const = 0;
 
     // unflattens the object from buffer.
     // size should be equal to the value of getFlattenedSize() when the
@@ -102,27 +101,11 @@ class Flattenable {
     // don't need to be dupped(). ie: the caller of unflatten doesn't
     // keep ownership. If a fd is not retained by unflatten() it must be
     // explicitly closed.
-    inline status_t unflatten(void const*& buffer, size_t& size, int const*& fds, size_t& count);
-};
+    virtual status_t unflatten(void const*& buffer, size_t& size, int const*& fds, size_t& count) = 0;
 
-template<typename T>
-inline size_t Flattenable<T>::getFlattenedSize() const {
-    return static_cast<T const*>(this)->T::getFlattenedSize();
-}
-template<typename T>
-inline size_t Flattenable<T>::getFdCount() const {
-    return static_cast<T const*>(this)->T::getFdCount();
-}
-template<typename T>
-inline status_t Flattenable<T>::flatten(
-        void*& buffer, size_t& size, int*& fds, size_t& count) const {
-    return static_cast<T const*>(this)->T::flatten(buffer, size, fds, count);
-}
-template<typename T>
-inline status_t Flattenable<T>::unflatten(
-        void const*& buffer, size_t& size, int const*& fds, size_t& count) {
-    return static_cast<T*>(this)->T::unflatten(buffer, size, fds, count);
-}
+protected:
+    virtual ~Flattenable() = 0;
+};
 
 /*
  * LightFlattenable is a protocol allowing object to serialize themselves out
diff --git a/libutils/Android.mk b/libutils/Android.mk
index 720443e..d48991d 100644
--- a/libutils/Android.mk
+++ b/libutils/Android.mk
@@ -22,6 +22,7 @@ commonSources:= \
 	BlobCache.cpp \
 	CallStack.cpp \
 	FileMap.cpp \
+	Flattenable.cpp \
 	JenkinsHash.cpp \
 	LinearAllocator.cpp \
 	LinearTransform.cpp \
diff --git a/libutils/Flattenable.cpp b/libutils/Flattenable.cpp
new file mode 100644
index 0000000..1f2ffaa
--- /dev/null
+++ b/libutils/Flattenable.cpp
@@ -0,0 +1,24 @@
+/*
+ * Copyright (C) 2006 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <utils/Flattenable.h>
+
+namespace android {
+
+Flattenable::~Flattenable() {
+}
+
+}; // namespace android
-- 
1.8.5.5

From 27143d25f8983c1bfbbd636996f9901efe63ceb8 Mon Sep 17 00:00:00 2001
From: maclaw <maclaw@maclaw.pl>
Date: Sun, 22 Dec 2013 17:52:38 +0000
Subject: [PATCH] shutdown/reboot fix

---
 libcutils/android_reboot.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/libcutils/android_reboot.c b/libcutils/android_reboot.c
index 326d402..ab836ec 100644
--- a/libcutils/android_reboot.c
+++ b/libcutils/android_reboot.c
@@ -93,7 +93,7 @@ static void remount_ro(void)
 
 
     /* Now poll /proc/mounts till it's done */
-    while (!remount_ro_done() && (cnt < 3600)) {
+    while (!remount_ro_done() && (cnt < 50)) {
         usleep(100000);
         cnt++;
     }
-- 
1.8.5.5
